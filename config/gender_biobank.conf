#!/usr/bin/env python2

# Copyright (c) 2018 Salim Arslan <salim.arslan@imperial.ac.uk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.


import os, random, time, datetime

# Data paths
data_dir 		= '/vol/biobank/12579/brain/fmri' # imaging data directory 
csv_path 		= '/vol/biobank/12579/brain/ukb8972_extracted.csv' # path to the csv file where data attributes will be read from (required for UK Biobank)

# Graph/data parameters
data_field 		= '31-0.0' # id of the sex attribute (required for UK Biobank)
indexing 		= 'column' # indexing of vectorised data (required for UK Biobank)
conn_tag 		= '25753_2_0' # type of network modelling applied to rs-fMRI functional connectivity (required for UK Biobank). See http://www.fmrib.ox.ac.uk/ukbiobank/ for details
coarsening_levels     	= 0 # e.g. 4 allows two max-pooling of size 4 x 4, if 0 no coarsening is applied 
number_edges          	= 10 # k of knn graph
metric                	= 'correlation' # metric to compute knn
seed 			= 101 # for a reproducible data split

# Model parameters
num_classes 		= 2  # number of classes
conv_depth 		= [2, 2, 1] # how many conv layers before applying max pooling?
filters 		= [32, 64, 128] # number of filters per layer
K_order 		= [9, 9, 9] # list of polynomial orders, i.e. number of hopes around a node
strides 		= [1, 1, 1] # pooling size per layer (should be 1 - no pooling or a power of 2 - reduction by 2 at each coarser level)
bias			= 'b2relu'  # type of bias to use, 'b1' for one bias per filter or 'b2' for one bias per vertex per filter
pool			= 'mpool1' # pooling, 'mpool' for max pooling or 'apool' for average pooling
dropout			= 0.5 # dropout to keep hidden neurons (no dropout with 1, -> 0 not learning)
filt 			= 'chebyshev5' # for parameterizing filters computationally less demandingly

# Learning parameters
learning_rate		= 0.001 # learning rate -> reduce learning rate proportional to the capacity of the network (higher capacity/lower lr)
momentum 		= 0 # for momentum optimizer, 0 for adam
regularization 		= 5e-4 # weight decay
decay_rate 		= 0.5 # reduce learning rate by a factor of 0.5 every time validation accuracy drops in two consecutive eval steps (default=1, no change) 
num_steps 		= 500 # number of iterations to run training
eval_frequency 		= 10 # evaluate model every this many steps

# Dataset-specific parameters 
num_subjects 		= -1 # number of subjects to use, -1 for all
num_images_per_class	= 100 # number of images per class per mini-batch
d 			= 55 # dimensionality of signal	
batch_size 		= num_images_per_class * num_classes # batch size
test_ratio		= 0.2 # Half of it is used for validation
top_k 			= 3 # find top k regions contributing most to decision of model
 
# Logging
log_dir 		= './log/sex_biobank_model_' + datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d-%H-%M') # for logging and model checkpoints






